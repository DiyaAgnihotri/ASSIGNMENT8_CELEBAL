# -*- coding: utf-8 -*-
"""app8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13tp4wWd-6r7omh6HLL1OSPR2MGJr681B
"""

import streamlit as st
import pandas as pd
from main_pipeline import load_and_preprocess_train, train_and_predict, prepare_rag, answer_query

# Page config MUST come first
st.set_page_config(page_title="Loan Eligibility + Chatbot", layout="centered")

def set_background():
    st.markdown("""
        <style>
        .stApp {
            background-image: url('https://images.unsplash.com/photo-1724304406928-c43b01912fa1?fm=jpg&q=60&w=3000&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8bG9hbnxlbnwwfHwwfHx8MA%3D%3D');
            background-size: cover;
            background-attachment: fixed;
            background-repeat: no-repeat;
            font-family: 'Segoe UI', sans-serif;
        }
        .block-container {
            background-color:#0a131c;
            padding: 2rem;
            border-radius: 20px;
            box-shadow: 0 8px 20px rgba(0,0,0,0.15);
            margin-top: 40px;
        }
        h1, h2, h3 {
            color: #003366;
            text-align: center;
        }
        .stButton button {
            background-color: #004488;
            color: white;
            font-weight: bold;
            border-radius: 10px;
            padding: 0.5rem 1.2rem;
        }
        .stButton button:hover {
            background-color: #0066aa;
        }
        .stTabs [data-baseweb="tab-list"] {
            justify-content: center;
        }
        .answer-box {
        background-color: rgba(30, 30, 30, 0.9);
        color: white;
        padding: 1rem;
        border-radius: 12px;
        margin-top: 1rem;
        font-size: 16px;
        line-height: 1.6;
}
        </style>
    """, unsafe_allow_html=True)


set_background()

# Container block
with st.container():
    st.markdown("<div class='block-container'>", unsafe_allow_html=True)
    st.title("üè¶ Loan Eligibility Predictor & Intelligent Chatbot")
    st.markdown("Get loan predictions and ask intelligent loan-related questions using RAG + ML.")

    tab1, tab2 = st.tabs(["üìä Predict Loan", "üí¨ Ask Chatbot"])

    # Load data and embeddings
    X_train, y_train, df_raw = load_and_preprocess_train()
    rag_texts, rag_embeddings, embedder, df_full = prepare_rag(df_raw)

    with tab1:
        st.subheader("üìù Enter Applicant Details")

        Gender = st.selectbox("Gender", ["Male", "Female"])
        Married = st.selectbox("Married", ["Yes", "No"])
        Dependents = st.selectbox("Dependents", ["0", "1", "2", "3"])
        Education = st.selectbox("Education", ["Graduate", "Not Graduate"])
        Self_Employed = st.selectbox("Self Employed", ["Yes", "No"])
        ApplicantIncome = st.number_input("Applicant Income", 0)
        CoapplicantIncome = st.number_input("Coapplicant Income", 0)
        LoanAmount = st.number_input("Loan Amount", 0)
        Loan_Amount_Term = st.number_input("Loan Term (months)", 100)
        Credit_History = st.selectbox("Credit History", [1.0, 0.0])
        Property_Area = st.selectbox("Property Area", ["Urban", "Rural", "Semiurban"])

        if st.button("üîÆ Predict Loan Eligibility"):
            encode = lambda x, options: options.index(x)
            input_df = pd.DataFrame([{
                "Gender": encode(Gender, ["Male", "Female"]),
                "Married": encode(Married, ["No", "Yes"]),
                "Dependents": int(Dependents),
                "Education": encode(Education, ["Graduate", "Not Graduate"]),
                "Self_Employed": encode(Self_Employed, ["No", "Yes"]),
                "ApplicantIncome": ApplicantIncome,
                "CoapplicantIncome": CoapplicantIncome,
                "LoanAmount": LoanAmount,
                "Loan_Amount_Term": Loan_Amount_Term,
                "Credit_History": Credit_History,
                "Property_Area": encode(Property_Area, ["Urban", "Rural", "Semiurban"])
            }])

            model, _ = train_and_predict(X_train, y_train, input_df)
            prediction = model.predict(input_df)[0]
            st.success(f"‚úÖ Loan Status: {'Approved ‚úÖ' if prediction == 1 else 'Rejected ‚ùå'}")

    with tab2:
        st.subheader("üí¨ Ask Any Question About Loans")
        user_q = st.text_area("Ask a question like 'Are self-employed applicants more likely to get rejected?'")

        if st.button("üí° Get Answer"):
            if user_q.strip():
                response = answer_query(user_q, rag_texts, rag_embeddings, embedder, df_raw=df_full)
                st.markdown(f"<div style='background-color:#3d3e40; padding:15px; border-radius:10px'>{response}</div>", unsafe_allow_html=True)
            else:
                st.warning("‚ö†Ô∏è Please enter a question.")

    st.markdown("""
    <hr style="border: 1px solid white;">
    <div style="text-align: center; color: white; font-size: 16px;">
        Made with ‚ù§Ô∏è by <strong>Diya Agnihotri</strong>
    </div>
""", unsafe_allow_html=True)

